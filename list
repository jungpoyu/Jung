contract donorinfo{
    struct DonorInfo{
        address[] donors;
        mapping (address => uint) ledger;
    }
    mapping (address => DonorInfo) DonationHistory;

    event LogDonate(address streamer, address donor, string nickname, uint value, string message);

    function donate(address _streamer, string _nickname, string _message) public payable {
        require(msg.value > 0);
        _streamer.transfer(msg.value);
        if (DonationHistory[_streamer].ledger[msg.sender] == 0) {
            DonationHistory[_streamer].donors.push(msg.sender);
        }
        DonationHisotry[_streamer].ledger[msg.sender] += msg.value;
        emit LogDonate(_streamer, msg.sender, _nickname, msg.value, _message);
    }
    function getDonorlist() public view returns (address[]){
        return DonationHistory[msg.sender].donors;
    }

    event LogListDonorInfo(address streamer, address user, uint value)
    function ListDonorInfo() public {
        for (uint i = 0;i < DonationHistory[msg.sender].donors.lenth; i++){
            address user = DonationHistory[msg.sender].donors[i];
            emit LogListDonorInfo(msg.sender, user, DonationHistory[msg.sender].ledger[user]);
        }
    }
}