pragma solidity ^0.4.24;

import "https://github.com/smartcontractkit/chainlink/blob/develop/evm/contracts/ChainlinkClient.sol";
import "https://github.com/smartcontractkit/chainlink/blob/develop/evm/contracts/vendor/Ownable.sol";

contract AutoTriage is ChainlinkClient, Ownable{
   
    address AuthorizedCreator;
     constructor() public{
        AuthorizedCreator == msg.sender;
    }
    uint256 constant private ORACLE_PAYMENT = 1 * LINK;

    uint EvidenceId;
    string EvidenceDescription;
    string EvidenceHash;
    string TriageApp;
    string TriageHash;
    uint CollectingTime;
    uint UTC;
    string Examiner;
    address Owner;
    bool Active;

    mapping(uint => mapping(uint => Evidence)) Case;
    struct Evidence{
        uint EvidenceId;
        string EvidenceDescription;
        string EvidenceHash;
        string TriageApp;
        string TriageHash;
        uint CollectingTime;
        uint GMT;
        string Examiner;
        address Owner;
        bool Active;
    } 
   // address[] 歷史擁有者 Owner;
    //modifier
    //event SetCase
   
    modifier AuthorizedCreate() {
        require(msg.sender == AuthorizedCreator ,"NEED TO BE AUTHORIZED");
        _;
    }
    //是否有這CASE
    function isCase(uint pCaseid) internal view returns (bool){
        return Case[pCaseid];
    }
    //是否有這Evidence
    function isEvidence(uint pCaseid, uint pEvidenceid) internal view returns (bool){
        return  Case[pCaseid].Evidence[pEvidenceid];
    }
    
    //event
    //創造case時發出
    event LogCreatecase(uint CaseId, string CaseDescription, bool Active);
    //創造證物時發出
    event LogCreateEvidence(uint EvidenceId,string EvidenceHash, string TriageLog, string EvidenceDescription, uint CollectingTime, string Collector, uint TransferTime, address Creator, address CurrentOwner);
    //更新證物訊息時發出(chainlink)--待修改
    event LogTransferEvidence(address CurrentOwner);
    
    event RequestInformationFulfilled(
    bytes32 indexed requestId,
    uint256 indexed price
  );
    //chainlink
    constructor() public Ownable() {
    setPublicChainlinkToken();
    }

    //創造Case並發出event
    function CreateCase(unit _CaseId) internal  Owner{
        
        emit LogCreatecase()
    }
        
    
    //創建證物並PUSH進case-並發出event
    function CreateEvidence(uint pCaseid, uint pEvidenceid) AuthorizedCreate{
        if (!Case[pCaseid].Evidence[pEvidenceid]){
            Case[pCaseid].Evidence[pEvidenceid] = true;
            
        }
        emit LogCreateEvidence()
    }

  function requestEthereumLastMarket(address _oracle, string _jobId)
    public
    onlyOwner
  {
    Chainlink.Request memory req = buildChainlinkRequest(stringToBytes32(_jobId), this, this.fulfillEthereumLastMarket.selector);
    req.add("get", "https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH&tsyms=USD");
    string[] memory path = new string[](4);
    path[0] = "RAW";
    path[1] = "ETH";
    path[2] = "USD";
    path[3] = "LASTMARKET";
    req.addStringArray("path", path);
    sendChainlinkRequestTo(_oracle, req, ORACLE_PAYMENT);
  }

  
  function fulfillEthereumLastMarket(bytes32 _requestId, bytes32 _market)
    public
    recordChainlinkFulfillment(_requestId)
  {
    emit RequestEthereumLastMarket(_requestId, _market);
    lastMarket = _market;
  }

  function getChainlinkToken() public view returns (address) {
    return chainlinkTokenAddress();
  }

  function withdrawLink() public onlyOwner {
    LinkTokenInterface link = LinkTokenInterface(chainlinkTokenAddress());
    require(link.transfer(msg.sender, link.balanceOf(address(this))), "Unable to transfer");
  }

  function cancelRequest(
    bytes32 _requestId,
    uint256 _payment,
    bytes4 _callbackFunctionId,
    uint256 _expiration
  )
    public
    onlyOwner
  {
    cancelChainlinkRequest(_requestId, _payment, _callbackFunctionId, _expiration);
  }

  function stringToBytes32(string memory source) private pure returns (bytes32 result) {
    bytes memory tempEmptyStringTest = bytes(source);
    if (tempEmptyStringTest.length == 0) {
      return 0x0;
    }

    assembly { // solhint-disable-line no-inline-assembly
      result := mload(add(source, 32))
    }
  }

    //使用chainlink取得證物資料
    function FetchinEvidenceinformation() AuthorizedCreate{
        
        emit LogTransferEvidence()
    }
    
    //使用chainlink更新相關數據及擁有者狀態
    
}
//使用modifier 區分不同權限level1（存取創造） level2(接收證物)
//payable-event
//constructor 初始
//public-cases-evidences
//一般證物?